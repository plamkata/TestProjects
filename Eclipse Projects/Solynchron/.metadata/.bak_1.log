!SESSION 2009-10-08 10:23:21.463 -----------------------------------------------
eclipse.buildId=M20090917-0800
java.version=1.6.0_10
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.rcp.product
Command-line arguments:  -os win32 -ws win32 -arch x86 -product org.eclipse.epp.package.rcp.product

This is a continuation of log file E:\Misceleniouse\Projects\Solynchron\.metadata\.bak_0.log
Created Time: 2009-10-08 12:19:06.250

!ENTRY org.eclipse.contribution.jdt 4 0 2009-10-08 12:19:06.250
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Domain extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String CATEGORY = "category";
	
	public static final String TOOLS = "tools";
	

	private String description;
	
	private DomainCategory category;
	
	private List<DomainTool> tools = new ArrayList<DomainTool>();
	
	/**
	 * 
	 */
	public Domain() {
		super();
	}

	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne
	public DomainCategory getCategory() {
		return category;
	}

	public void setCategory(DomainCategory category) {
		this.category = category;
	}


	@OneToMany(mappedBy = "domain", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@OrderBy("tool, toolVersion")
	public List<DomainTool> getTools() {
		return tools;
	}

	public void setTools(List<DomainTool> tools) {
		this.tools = tools;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.problem;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Nested;
import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.domain.Domain;
import com.startup.solynchron.obj.solution.Solution;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Problem extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String TYPE = "type";
	
	public static final String DOMAIN = "domain";
	
	public static final String SOLUTIONS = "solutions";
	
	public static final String ARTIFACTS = "artifacts";
	

	private String description;
	
	private ProblemType type;
	
	private Domain domain;
	
	private List<Solution> solutions = new ArrayList<Solution>();
	
	private List<ProblemArtifact> artifacts = new ArrayList<ProblemArtifact>();
	
	/**
	 * 
	 */
	public Problem() {
		// TODO Auto-generated constructor stub
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Nested
	@ManyToOne
	public ProblemType getType() {
		return type;
	}

	public void setType(ProblemType type) {
		this.type = type;
	}

	@ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public Domain getDomain() {
		return domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.PERSIST, CascadeType.MERGE}, 
			fetch = FetchType.LAZY)
	@OrderBy("method")
	public List<Solution> getSolutions() {
		return solutions;
	}

	public void setSolutions(List<Solution> solutions) {
		this.solutions = solutions;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.MERGE, CascadeType.PERSIST}, 
			fetch = FetchType.EAGER)
	public List<ProblemArtifact> getArtifacts() {
		return artifacts;
	}

	public void setArtifacts(List<ProblemArtifact> artifacts) {
		this.artifacts = artifacts;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Domain extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String CATEGORY = "category";
	
	public static final String TOOLS = "tools";
	

	private String description;
	
	private DomainCategory category;
	
	private List<DomainTool> tools = new ArrayList<DomainTool>();
	
	/**
	 * 
	 */
	public Domain() {
		super();
	}

	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne
	public DomainCategory getCategory() {
		return category;
	}

	public void setCategory(DomainCategory category) {
		this.category = category;
	}


	@OneToMany(mappedBy = "domain", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@OrderBy("tool, toolVersion")
	public List<DomainTool> getTools() {
		return tools;
	}

	public void setTools(List<DomainTool> tools) {
		this.tools = tools;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.problem;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Nested;
import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.domain.Domain;
import com.startup.solynchron.obj.solution.Solution;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Problem extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String TYPE = "type";
	
	public static final String DOMAIN = "domain";
	
	public static final String SOLUTIONS = "solutions";
	
	public static final String ARTIFACTS = "artifacts";
	

	private String description;
	
	private ProblemType type;
	
	private Domain domain;
	
	private List<Solution> solutions = new ArrayList<Solution>();
	
	private List<ProblemArtifact> artifacts = new ArrayList<ProblemArtifact>();
	
	/**
	 * 
	 */
	public Problem() {
		// TODO Auto-generated constructor stub
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Nested
	@ManyToOne
	public ProblemType getType() {
		return type;
	}

	public void setType(ProblemType type) {
		this.type = type;
	}

	@ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public Domain getDomain() {
		return domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.PERSIST, CascadeType.MERGE}, 
			fetch = FetchType.LAZY)
	@OrderBy("method")
	public List<Solution> getSolutions() {
		return solutions;
	}

	public void setSolutions(List<Solution> solutions) {
		this.solutions = solutions;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.MERGE, CascadeType.PERSIST}, 
			fetch = FetchType.EAGER)
	public List<ProblemArtifact> getArtifacts() {
		return artifacts;
	}

	public void setArtifacts(List<ProblemArtifact> artifacts) {
		this.artifacts = artifacts;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:296)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:223)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:153)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:515)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1077)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1242)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Domain extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String CATEGORY = "category";
	
	public static final String TOOLS = "tools";
	

	private String description;
	
	private DomainCategory category;
	
	private List<DomainTool> tools = new ArrayList<DomainTool>();
	
	/**
	 * 
	 */
	public Domain() {
		super();
	}

	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne
	public DomainCategory getCategory() {
		return category;
	}

	public void setCategory(DomainCategory category) {
		this.category = category;
	}


	@OneToMany(mappedBy = "domain", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@OrderBy("tool, toolVersion")
	public List<DomainTool> getTools() {
		return tools;
	}

	public void setTools(List<DomainTool> tools) {
		this.tools = tools;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.problem;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Nested;
import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.domain.Domain;
import com.startup.solynchron.obj.solution.Solution;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Problem extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String TYPE = "type";
	
	public static final String DOMAIN = "domain";
	
	public static final String SOLUTIONS = "solutions";
	
	public static final String ARTIFACTS = "artifacts";
	

	private String description;
	
	private ProblemType type;
	
	private Domain domain;
	
	private List<Solution> solutions = new ArrayList<Solution>();
	
	private List<ProblemArtifact> artifacts = new ArrayList<ProblemArtifact>();
	
	/**
	 * 
	 */
	public Problem() {
		// TODO Auto-generated constructor stub
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Nested
	@ManyToOne
	public ProblemType getType() {
		return type;
	}

	public void setType(ProblemType type) {
		this.type = type;
	}

	@ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public Domain getDomain() {
		return domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.PERSIST, CascadeType.MERGE}, 
			fetch = FetchType.LAZY)
	@OrderBy("method")
	public List<Solution> getSolutions() {
		return solutions;
	}

	public void setSolutions(List<Solution> solutions) {
		this.solutions = solutions;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.MERGE, CascadeType.PERSIST}, 
			fetch = FetchType.EAGER)
	public List<ProblemArtifact> getArtifacts() {
		return artifacts;
	}

	public void setArtifacts(List<ProblemArtifact> artifacts) {
		this.artifacts = artifacts;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 23 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: 2625
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.extractNextJavaIdentifier(AJCompilationUnitProblemFinder.java:875)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.isARealProblem(AJCompilationUnitProblemFinder.java:497)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.removeAJNonProblems(AJCompilationUnitProblemFinder.java:397)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:268)
	... 22 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Domain extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String CATEGORY = "category";
	
	public static final String TOOLS = "tools";
	

	private String description;
	
	private DomainCategory category;
	
	private List<DomainTool> tools = new ArrayList<DomainTool>();
	
	/**
	 * 
	 */
	public Domain() {
		super();
	}

	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne
	public DomainCategory getCategory() {
		return category;
	}

	public void setCategory(DomainCategory category) {
		this.category = category;
	}


	@OneToMany(mappedBy = "domain", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@OrderBy("tool, toolVersion")
	public List<DomainTool> getTools() {
		return tools;
	}

	public void setTools(List<DomainTool> tools) {
		this.tools = tools;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.problem;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Nested;
import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.domain.Domain;
import com.startup.solynchron.obj.solution.Solution;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Problem extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String TYPE = "type";
	
	public static final String DOMAIN = "domain";
	
	public static final String SOLUTIONS = "solutions";
	
	public static final String ARTIFACTS = "artifacts";
	

	private String description;
	
	private ProblemType type;
	
	private Domain domain;
	
	private List<Solution> solutions = new ArrayList<Solution>();
	
	private List<ProblemArtifact> artifacts = new ArrayList<ProblemArtifact>();
	
	/**
	 * 
	 */
	public Problem() {
		// TODO Auto-generated constructor stub
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Nested
	@ManyToOne
	public ProblemType getType() {
		return type;
	}

	public void setType(ProblemType type) {
		this.type = type;
	}

	@ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public Domain getDomain() {
		return domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.PERSIST, CascadeType.MERGE}, 
			fetch = FetchType.LAZY)
	@OrderBy("method")
	public List<Solution> getSolutions() {
		return solutions;
	}

	public void setSolutions(List<Solution> solutions) {
		this.solutions = solutions;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.MERGE, CascadeType.PERSIST}, 
			fetch = FetchType.EAGER)
	public List<ProblemArtifact> getArtifacts() {
		return artifacts;
	}

	public void setArtifacts(List<ProblemArtifact> artifacts) {
		this.artifacts = artifacts;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:296)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:223)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:153)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:515)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1077)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1242)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 2625
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.extractNextJavaIdentifier(AJCompilationUnitProblemFinder.java:875)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.isARealProblem(AJCompilationUnitProblemFinder.java:497)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.removeAJNonProblems(AJCompilationUnitProblemFinder.java:397)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:268)
	... 22 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2009-10-08 12:19:06.263
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Domain extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String CATEGORY = "category";
	
	public static final String TOOLS = "tools";
	

	private String description;
	
	private DomainCategory category;
	
	private List<DomainTool> tools = new ArrayList<DomainTool>();
	
	/**
	 * 
	 */
	public Domain() {
		super();
	}

	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne
	public DomainCategory getCategory() {
		return category;
	}

	public void setCategory(DomainCategory category) {
		this.category = category;
	}


	@OneToMany(mappedBy = "domain", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@OrderBy("tool, toolVersion")
	public List<DomainTool> getTools() {
		return tools;
	}

	public void setTools(List<DomainTool> tools) {
		this.tools = tools;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.problem;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Nested;
import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.domain.Domain;
import com.startup.solynchron.obj.solution.Solution;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Problem extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String TYPE = "type";
	
	public static final String DOMAIN = "domain";
	
	public static final String SOLUTIONS = "solutions";
	
	public static final String ARTIFACTS = "artifacts";
	

	private String description;
	
	private ProblemType type;
	
	private Domain domain;
	
	private List<Solution> solutions = new ArrayList<Solution>();
	
	private List<ProblemArtifact> artifacts = new ArrayList<ProblemArtifact>();
	
	/**
	 * 
	 */
	public Problem() {
		// TODO Auto-generated constructor stub
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Nested
	@ManyToOne
	public ProblemType getType() {
		return type;
	}

	public void setType(ProblemType type) {
		this.type = type;
	}

	@ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public Domain getDomain() {
		return domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.PERSIST, CascadeType.MERGE}, 
			fetch = FetchType.LAZY)
	@OrderBy("method")
	public List<Solution> getSolutions() {
		return solutions;
	}

	public void setSolutions(List<Solution> solutions) {
		this.solutions = solutions;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.MERGE, CascadeType.PERSIST}, 
			fetch = FetchType.EAGER)
	public List<ProblemArtifact> getArtifacts() {
		return artifacts;
	}

	public void setArtifacts(List<ProblemArtifact> artifacts) {
		this.artifacts = artifacts;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.event.CompareManager;

/**
 * @author plamKaTa
 *
 */
@Entity
public class DomainCategory extends ModelObject {
	
	@Basic
	@Column(unique = true, nullable = false)
	private String name;
	
	private DomainCategory parent;
	
	private List<DomainCategory> children = new ArrayList<DomainCategory>();
	
	private List<Domain> domains = new ArrayList<Domain>();

	/**
	 * 
	 */
	public DomainCategory() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	public DomainCategory getParent() {
		return parent;
	}

	public void setParent(DomainCategory parent) {
		this.parent = parent;
	}

	@OneToMany(mappedBy = "parent", cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@OrderBy("name")
	public List<DomainCategory> getChildren() {
		return children;
	}

	public void setChildren(List<DomainCategory> children) {
		this.children = children;
	}

	@OneToMany(mappedBy = "category", fetch = FetchType.LAZY)
	public List<Domain> getDomains() {
		return domains;
	}

	public void setDomains(List<Domain> domains) {
		this.domains = domains;
	}
	
	public boolean equalsParents(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			boolean equal = CompareManager.equals(this.getParent(), other.getParent());
			if (this.getParent() == null || other.getParent() == null) {
				return equal;
			}
			if (this.getParent().isNew() || other.getParent().isNew()) {
				return this.getParent().equals(other.getParent());
			} else {
				return equal;
			}
		} else {
			return false;
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof DomainCategory) {
			DomainCategory other = (DomainCategory) obj;
			return CompareManager.equals(
					this.getName(), other.getName()) && 
						equalsParents(obj);
				
			
		} else {
			return false;
		}
	}
	
	@Override
	public int hashCode() {
		if (name != null && parent != null) {
			return name.hashCode() @;
		}
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Domain extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String CATEGORY = "category";
	
	public static final String TOOLS = "tools";
	

	private String description;
	
	private DomainCategory category;
	
	private List<DomainTool> tools = new ArrayList<DomainTool>();
	
	/**
	 * 
	 */
	public Domain() {
		super();
	}

	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne
	public DomainCategory getCategory() {
		return category;
	}

	public void setCategory(DomainCategory category) {
		this.category = category;
	}


	@OneToMany(mappedBy = "domain", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@OrderBy("tool, toolVersion")
	public List<DomainTool> getTools() {
		return tools;
	}

	public void setTools(List<DomainTool> tools) {
		this.tools = tools;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**
 * 
 */
package com.startup.solynchron.obj.problem;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import com.damnhandy.aspects.bean.Nested;
import com.damnhandy.aspects.bean.Observable;
import com.startup.solynchron.obj.ModelObject;
import com.startup.solynchron.obj.domain.Domain;
import com.startup.solynchron.obj.solution.Solution;

/**
 * @author plamKaTa
 *
 */
@Observable
@Entity
public class Problem extends ModelObject {
	
	public static final String DESCRIPTION = "description";
	
	public static final String TYPE = "type";
	
	public static final String DOMAIN = "domain";
	
	public static final String SOLUTIONS = "solutions";
	
	public static final String ARTIFACTS = "artifacts";
	

	private String description;
	
	private ProblemType type;
	
	private Domain domain;
	
	private List<Solution> solutions = new ArrayList<Solution>();
	
	private List<ProblemArtifact> artifacts = new ArrayList<ProblemArtifact>();
	
	/**
	 * 
	 */
	public Problem() {
		// TODO Auto-generated constructor stub
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Nested
	@ManyToOne
	public ProblemType getType() {
		return type;
	}

	public void setType(ProblemType type) {
		this.type = type;
	}

	@ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public Domain getDomain() {
		return domain;
	}

	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.PERSIST, CascadeType.MERGE}, 
			fetch = FetchType.LAZY)
	@OrderBy("method")
	public List<Solution> getSolutions() {
		return solutions;
	}

	public void setSolutions(List<Solution> solutions) {
		this.solutions = solutions;
	}

	@OneToMany(mappedBy = "problem", 
			cascade = {CascadeType.MERGE, CascadeType.PERSIST}, 
			fetch = FetchType.EAGER)
	public List<ProblemArtifact> getArtifacts() {
		return artifacts;
	}

	public void setArtifacts(List<ProblemArtifact> artifacts) {
		this.artifacts = artifacts;
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:296)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:223)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:153)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:515)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1077)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1242)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 2625
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.extractNextJavaIdentifier(AJCompilationUnitProblemFinder.java:875)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.isARealProblem(AJCompilationUnitProblemFinder.java:497)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.removeAJNonProblems(AJCompilationUnitProblemFinder.java:397)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:268)
	... 22 more

!ENTRY org.eclipse.contribution.jdt 4 0 2009-10-08 12:47:49.304
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.startup.solynchron.Activator;
import com.startup.solynchron.CodeExecutor;
import com.startup.solynchron.ExecutionManager;
import com.startup.solynchron.InitializationProgressException;
import com.startup.solynchron.dao.LogicManager;
import com.startup.solynchron.dao.RecordLogic;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class OpenProblemFormAction extends OpenFormEditorAction {
    
	/**
	 * The constructor.
	 */
	public OpenProblemFormAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			Object count = ExecutionManager.executeInTransaction(
					new CodeExecutor("open") {
				@Override
				public Object execute(Object[] params) throws Exception {
					return newProblem();
				}
			}, null);
			
			if (count != null) {
				MessageDialog.openInformation(
					getWindow().getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + count + 
					" records in the database");
			}
		} catch (Exception ex) {
			MessageDialog.openError(
	    			getWindow().getShell(),
	    			"Solynchron Plug-in Error",
	    			"Error occurred: " + ex.getMessage());
			Activator.log(ex);
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	private Object newProblem() throws InitializationProgressException {
		RecordLogic logic = (RecordLogic) LogicManager.get(LogicManager.RECORD_LOGIC);
		Long result = logic.incrementRecord();
		if (result != null) {
			openEditor(new FormEditorInput(
					Activator.getResource("OpenProblemFormAction.name")), 
					"com.startup.solynchron.problem-editor"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return result;
	}
	
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.startup.solynchron.Activator;
import com.startup.solynchron.CodeExecutor;
import com.startup.solynchron.ExecutionManager;
import com.startup.solynchron.InitializationProgressException;
import com.startup.solynchron.dao.LogicManager;
import com.startup.solynchron.dao.RecordLogic;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class OpenProblemFormAction extends OpenFormEditorAction {
    
	/**
	 * The constructor.
	 */
	public OpenProblemFormAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			Object count = ExecutionManager.executeInTransaction(
					new CodeExecutor("open") {
				@Override
				public Object execute(Object[] params) throws Exception {
					return newProblem();
				}
			}, null);
			
			if (count != null) {
				MessageDialog.openInformation(
					getWindow().getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + count + 
					" records in the database");
			}
		} catch (Exception ex) {
			MessageDialog.openError(
	    			getWindow().getShell(),
	    			"Solynchron Plug-in Error",
	    			"Error occurred: " + ex.getMessage());
			Activator.log(ex);
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	private Object newProblem() throws InitializationProgressException {
		RecordLogic logic = (RecordLogic) LogicManager.get(LogicManager.RECORD_LOGIC);
		Long result = logic.incrementRecord();
		if (result != null) {
			openEditor(new FormEditorInput(
					Activator.getResource("OpenProblemFormAction.name")), 
					"com.startup.solynchron.problem-editor"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return result;
	}
	
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:296)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:223)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:153)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:515)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1077)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1242)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.startup.solynchron.Activator;
import com.startup.solynchron.CodeExecutor;
import com.startup.solynchron.ExecutionManager;
import com.startup.solynchron.InitializationProgressException;
import com.startup.solynchron.dao.LogicManager;
import com.startup.solynchron.dao.RecordLogic;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class OpenProblemFormAction extends OpenFormEditorAction {
    
	/**
	 * The constructor.
	 */
	public OpenProblemFormAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			Object count = ExecutionManager.executeInTransaction(
					new CodeExecutor("open") {
				@Override
				public Object execute(Object[] params) throws Exception {
					return newProblem();
				}
			}, null);
			
			if (count != null) {
				MessageDialog.openInformation(
					getWindow().getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + count + 
					" records in the database");
			}
		} catch (Exception ex) {
			MessageDialog.openError(
	    			getWindow().getShell(),
	    			"Solynchron Plug-in Error",
	    			"Error occurred: " + ex.getMessage());
			Activator.log(ex);
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	private Object newProblem() throws InitializationProgressException {
		RecordLogic logic = (RecordLogic) LogicManager.get(LogicManager.RECORD_LOGIC);
		Long result = logic.incrementRecord();
		if (result != null) {
			openEditor(new FormEditorInput(
					Activator.getResource("OpenProblemFormAction.name")), 
					"com.startup.solynchron.problem-editor"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return result;
	}
	
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 23 more
Caused by: java.lang.ClassCastException: org.eclipse.jdt.internal.core.CompilationUnit cannot be cast to org.eclipse.ajdt.core.javaelements.AJCompilationUnit
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.find(ITDAwareNameEnvironment.java:84)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:287)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.findType(CancelableNameEnvironment.java:45)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:127)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:183)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2592)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2309)
	at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:44)
	at org.eclipse.jdt.internal.compiler.ast.TypeReference.internalResolveType(TypeReference.java:130)
	at org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:197)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1403)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1090)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods(SourceTypeBinding.java:593)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes(CompilationUnitScope.java:447)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:877)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:233)
	... 22 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.startup.solynchron.Activator;
import com.startup.solynchron.CodeExecutor;
import com.startup.solynchron.ExecutionManager;
import com.startup.solynchron.InitializationProgressException;
import com.startup.solynchron.dao.LogicManager;
import com.startup.solynchron.dao.RecordLogic;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class OpenProblemFormAction extends OpenFormEditorAction {
    
	/**
	 * The constructor.
	 */
	public OpenProblemFormAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			Object count = ExecutionManager.executeInTransaction(
					new CodeExecutor("open") {
				@Override
				public Object execute(Object[] params) throws Exception {
					return newProblem();
				}
			}, null);
			
			if (count != null) {
				MessageDialog.openInformation(
					getWindow().getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + count + 
					" records in the database");
			}
		} catch (Exception ex) {
			MessageDialog.openError(
	    			getWindow().getShell(),
	    			"Solynchron Plug-in Error",
	    			"Error occurred: " + ex.getMessage());
			Activator.log(ex);
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	private Object newProblem() throws InitializationProgressException {
		RecordLogic logic = (RecordLogic) LogicManager.get(LogicManager.RECORD_LOGIC);
		Long result = logic.incrementRecord();
		if (result != null) {
			openEditor(new FormEditorInput(
					Activator.getResource("OpenProblemFormAction.name")), 
					"com.startup.solynchron.problem-editor"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return result;
	}
	
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:296)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:223)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:153)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:515)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1077)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1242)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.ClassCastException: org.eclipse.jdt.internal.core.CompilationUnit cannot be cast to org.eclipse.ajdt.core.javaelements.AJCompilationUnit
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.find(ITDAwareNameEnvironment.java:84)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:287)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.findType(CancelableNameEnvironment.java:45)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:127)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:183)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2592)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2309)
	at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:44)
	at org.eclipse.jdt.internal.compiler.ast.TypeReference.internalResolveType(TypeReference.java:130)
	at org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:197)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1403)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1090)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods(SourceTypeBinding.java:593)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes(CompilationUnitScope.java:447)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:877)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:233)
	... 22 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2009-10-08 12:47:49.307
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.startup.solynchron.Activator;
import com.startup.solynchron.CodeExecutor;
import com.startup.solynchron.ExecutionManager;
import com.startup.solynchron.InitializationProgressException;
import com.startup.solynchron.dao.LogicManager;
import com.startup.solynchron.dao.RecordLogic;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class OpenProblemFormAction extends OpenFormEditorAction {
    
	/**
	 * The constructor.
	 */
	public OpenProblemFormAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			Object count = ExecutionManager.executeInTransaction(
					new CodeExecutor("open") {
				@Override
				public Object execute(Object[] params) throws Exception {
					return newProblem();
				}
			}, null);
			
			if (count != null) {
				MessageDialog.openInformation(
					getWindow().getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + count + 
					" records in the database");
			}
		} catch (Exception ex) {
			MessageDialog.openError(
	    			getWindow().getShell(),
	    			"Solynchron Plug-in Error",
	    			"Error occurred: " + ex.getMessage());
			Activator.log(ex);
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	private Object newProblem() throws InitializationProgressException {
		RecordLogic logic = (RecordLogic) LogicManager.get(LogicManager.RECORD_LOGIC);
		Long result = logic.incrementRecord();
		if (result != null) {
			openEditor(new FormEditorInput(
					Activator.getResource("OpenProblemFormAction.name")), 
					"com.startup.solynchron.problem-editor"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return result;
	}
	
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Date;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.common.NullValue;
import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;
import net.sf.rcpforms.modeladapter.tables.ObservableTreeListBeanContentProvider;
import net.sf.rcpforms.tablesupport.tables.ColumnConfiguration;
import net.sf.rcpforms.tablesupport.tables.ECellEditorType;
import net.sf.rcpforms.tablesupport.tables.TableUtil;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCheckboxTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPComposite;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPPushButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTable;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPTree;

import org.eclipse.core.databinding.Binding;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * Example part demonstrating the advanced table features of RCPForms.
 * <p>
 * <ul>
 * <li>creating an editable table just by configuring the column properties, no coding needed
 * <li>how converters from data binding are automatically used to render table data
 * <li>binding of multi selection state of a checkbox table to a list
 * <li>binding of multi selection state of a normal table to a list
 * <li>automatic creation of a table cursor if the table contains editable columns
 * <li>disabled rows if {@link RCPTableFormToolkit} is used
 * </ul>
 * 
 * @author Marco van Meegen
 */
public class SandboxTablePart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPCheckboxTable m_CheckboxTable;

    private RCPTable m_Table;

    private RCPTable m_TableCursorSupport;

    private RCPPushButton m_addColumn;

    private RCPPushButton m_removeColumn;

    private RCPPushButton m_toggleIsSelectable;

    private RCPPushButton m_removeInput;

    private TableViewer m_CheckboxTableViewer;

    private TableViewer m_TableViewer;

    private TableViewer m_TableViewerCursorSupport;

    private RCPTree m_TreeTable;

    private RCPTree m_CheckboxTreeTable;

    private TreeViewer m_TreeTableViewer;

    private TreeViewer m_checkedTreeTableViewer;

    private TableModel dataModel;

    private Binding tableCheckBinding;

    public SandboxTablePart()
    {
        m_addColumn = new RCPPushButton("add item");
        m_removeColumn = new RCPPushButton("remove item");
        m_toggleIsSelectable = new RCPPushButton("toggle selectable");
        m_removeInput = new RCPPushButton("replace data");

        m_CheckboxTable = new RCPCheckboxTable("CheckboxTable:");
        m_Table = new RCPTable("Table:");
        m_TableCursorSupport = new RCPTable("Table with cursor support:");

        // m_TreeTable = new RCPTree("TreeTable:", SWT.FULL_SELECTION);
        // m_CheckboxTreeTable = new RCPTree("CheckboxTreeTable:", SWT.FULL_SELECTION | SWT.CHECK);

    }

    private static ColumnConfiguration[] createColumnConfigurations(boolean editable)
    {
        // this configures the table with the attributes to display;
        // automatic conversion will be applied using the standard data binding converters
        // which are used in text fields too
        Object[] values = new Object[Gender.values().length + 1];
        // add null value
        values[0] = NullValue.getInstance();
        System.arraycopy(Gender.values(), 0, values, 1, values.length - 1);
        ColumnConfiguration[] columnConfigurations = {
                new ColumnConfiguration("Name", TestModel.P_Name, 100, SWT.LEFT, false,
                        editable ? ECellEditorType.TEXT : null).setGrabHorizontal(true),
                new ColumnConfiguration("Geburtsdatum", TestModel.P_BirthDate, 80, SWT.LEFT, false,
                        editable ? ECellEditorType.DATE : null),
                editable ? new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60, SWT.LEFT,
                        values) : new ColumnConfiguration("Geschlecht", TestModel.P_Gender, 60,
                        SWT.LEFT),
                new ColumnConfiguration("Kontoüberzug", TestModel.P_OverdrawAccount, 50,
                        SWT.CENTER, false, editable ? ECellEditorType.CHECK : null),
                new ColumnConfiguration("Kinder", TestModel.P_ChildCount, 50, SWT.RIGHT, false,
                        editable ? ECellEditorType.TEXT : null),
                new ColumnConfiguration("Kontostand", TestModel.P_AccountBalance, 70, SWT.RIGHT,
                        false, editable ? ECellEditorType.TEXT : null)};
        Validate.noNullElements(columnConfigurations,
                "ColumnConfigurations must not have null elements");
        return columnConfigurations;
    }

    @Override
    public void createUI(FormToolkit formToolkit, Composite parent)
    {
        GridBuilder builder = new GridBuilder(formToolkit, parent, 1);
        mainSection = new RCPSection("Sandbox Table Section");
        GridBuilder sectionBuilder = builder.addContainer(mainSection, 2);
        RCPComposite buttonPanel = new RCPComposite();
        GridBuilder buttonWidgetFactory = sectionBuilder.fill(1).addContainer(buttonPanel, 8);
        buttonWidgetFactory.add(m_addColumn);
        m_addColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                addRandomItem();
            }
        });

        buttonWidgetFactory.add(m_removeColumn);
        m_removeColumn.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeFirstItem();
            }
        });

        buttonWidgetFactory.add(m_toggleIsSelectable);
        m_toggleIsSelectable.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                toggleSelectableState();
            }
        });
        m_toggleIsSelectable.getSWTButton().setToolTipText(
                "removes all selections and toggle selectable state");

        buttonWidgetFactory.add(m_removeInput);
        m_removeInput.getSWTButton().addSelectionListener(new SelectionAdapter()
        {
            @Override
            public void widgetSelected(SelectionEvent e)
            {
                removeList();
            }
        });
        m_removeInput.getSWTButton().setToolTipText("replaces the list of the second table");

        // create normal Table with table cursor support
        sectionBuilder.add(m_TableCursorSupport);
        m_TableViewerCursorSupport = TableUtil.configureTableViewer(
                (TableViewer) m_TableCursorSupport.getViewer(), createColumnConfigurations(true),
                TestModel.class, false, true);

        // create normal Table
        sectionBuilder.add(m_Table);
        m_TableViewer = TableUtil.configureTableViewer((TableViewer) m_Table.getViewer(),
                createColumnConfigurations(true), TestModel.class, false, false);

        // create Checkbox Table
        sectionBuilder.add(m_CheckboxTable);
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
        gd.grabExcessHorizontalSpace = true;
        gd.grabExcessVerticalSpace = true;
        gd.horizontalAlignment = SWT.FILL;
//        gd.verticalIndent = SWT.FILL;
        //show 3 columns with data and the header column
        gd.heightHint = sectionBuilder.getHeightHint(3);
        gd.heightHint += m_CheckboxTable.getSWTTable().getHeaderHeight();
        
        m_CheckboxTable.getSWTTable().setLayoutData(gd);
        ColumnConfiguration[] columnConfigurations = createColumnConfigurations(false);
        columnConfigurations[0].enableColumnSorting(false);
        columnConfigurations[2].enableColumnSorting(false);
        m_CheckboxTableViewer = TableUtil.configureTableViewer((TableViewer) m_CheckboxTable
                .getViewer(), columnConfigurations, TestModel.class, false, false);

        // create table tree
        // sectionBuilder.add(m_TreeTable);
        // class SampleObservableTreeListBeanContentProvider extends
        // ObservableTreeListBeanContentProvider{
        //            
        // public Object[] getChildren(Object parentElement)
        // {
        // return new Object[]{generateNewDataModelItem(), generateNewDataModelItem()};
        // }
        //
        // public Object getParent(Object element)
        // {
        // return null;
        // }
        //
        // public boolean hasChildren(Object element)
        // {
        // return ((TestModel) element).getName().equals("Mueller");
        // }
        //
        // public Object[] getElements(Object inputElement)
        // {
        // return dataModel.getList().toArray();
        // }
        //
        // public void dispose()
        // {
        // }
        // };
        // m_TreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_TreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(true), TestModel.class, false);
        //        
        // //create checked table tree
        // sectionBuilder.add(m_CheckboxTreeTable);
        // m_checkedTreeTableViewer =
        // TableUtil.configureTreeTableViewer((TreeViewer)m_CheckboxTreeTable.getViewer(),
        // (ITreeContentProvider)new SampleObservableTreeListBeanContentProvider(),
        // createColumnConfigurations(false), TestModel.class, false);

    }

    @Override
    public void bind(ValidationManager context, Object modelBean)
    {
        Validate.isTrue(modelBean instanceof TableModel);
        this.dataModel = (TableModel) modelBean;

        // set normal table viewers input
        m_TableViewerCursorSupport.setInput(dataModel.getList());
        m_TableViewer.setInput(dataModel.getList());
        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_TableCursorSupport, dataModel.getSelectedList());
        tableCheckBinding = context.bindSelection(m_Table, dataModel.getSelectedList());

        // set the CheckboxViewer's input
        m_CheckboxTableViewer.setInput(dataModel.getList());

        // bind selection to table; if its checkbox table, the check state is bound,
        // otherwise the multi selection of rows.
        context.bindSelection(m_CheckboxTable, dataModel.getSelectedList());

        // set the TreeViewer's input
        // m_TreeTableViewer.setInput(dataModel.getList());
        // m_checkedTreeTableViewer.setInput(dataModel.getList());

    }

    private void removeFirstItem()
    {
        if (dataModel.getList().size() > 0)
        {
            dataModel.getList().remove(m_CheckboxTableViewer.getElementAt(0));
        }
    }

    private void addRandomItem()
    {
        dataModel.getList().add(this.generateNewDataModelItem());
    }

    private TestModel generateNewDataModelItem()
    {
        // generate Geschlechtscode
        Gender geschlecht = null;
        switch ((int) (Math.random() * 10000) % 3)
        {
            case 0:
                geschlecht = Gender.FEMALE;
                break;
            case 1:
                geschlecht = Gender.MALE;
                break;
            default:
                geschlecht = Gender.UNKNOWN;
                break;
        }

        return new TestModel("Mueller - " + (int) (Math.random() * 1000), new Date((long) (Math
                .random() * 1100000000000L)), (int) (Math.random() * 1000) % 2 == 0 ? true : false,
                (int) (Math.random() * 1000) % 5, Math.random() * 10000, geschlecht, (int) (Math
                        .random() * 1000) % 2 == 0 ? true : false);
    }

    private void toggleSelectableState()
    {
        // clear all selections
        WritableList wl = dataModel.getList();
        for (int i = 0; i < wl.size(); ++i)
        {
            TestModel s2dm = (TestModel) wl.get(i);
            s2dm.setIsSelectable(s2dm.getIsSelectable() ? false : true);
        }

        // Problem -> fires no event... manual refresh...
        m_TableViewerCursorSupport.refresh(true, true);
        m_CheckboxTableViewer.refresh(true, true);
        m_TableViewer.refresh(true, true);
    }

    private void removeList()
    {
        // unbind checkedList from table
        if (tableCheckBinding != null)
        {
            tableCheckBinding.dispose();
            tableCheckBinding = null;
        }

        // m_TableViewer.setInput(null);
        WritableList newList = new WritableList(SWTObservables.getRealm(Display.getDefault()));
        for (int i = 0; i < 10; ++i)
        {
            newList.add(this.generateNewDataModelItem());
        }
        m_TableViewer.setInput(newList);
    }

    public static void main(String[] args)
    {
        final TableModel model = new TableModel();
        final RCPFormPart part = new SandboxTablePart();
        RCPFormFactory.getInstance().startTestShell("SandboxTablePart", part, model);
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Marco van Meegen - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import java.util.Arrays;
import java.util.Date;

import net.sf.rcpforms.common.util.Validate;
import net.sf.rcpforms.examples.complete.TestModel.Gender;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.core.databinding.observable.list.IListChangeListener;
import org.eclipse.core.databinding.observable.list.ListChangeEvent;
import org.eclipse.core.databinding.observable.list.WritableList;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.swt.widgets.Display;

import com.damnhandy.aspects.bean.Observable;

/**
 * Class TableModel represents the presentation model for the table part. WritableList is used,
 * since notification is built-in and much more efficient than bean indexed property notification.
 * 
 * @author Marco van Meegen
 * @author Remo Loetscher
 */
@Observable
public class TableModel 
{

    public static final String P_DIRTY = "dirty";
    public static final String P_TEST_MODEL = "testModel";

    IListChangeListener listChangeListener = new IListChangeListener()
    {

        public void handleListChange(ListChangeEvent event)
        {
            // not interested in which kind of change,
            // only that it was changed!
            firePropertyChange(TableModel.P_DIRTY, null, null);
        }
    };

    /** list of elements to display in the table */
    private WritableList list;

    /** list of elements which are checked/selected in the table */
    private WritableList selectedList;
    
    /** variable used for master detail binding and therefore it has to be initalised, not null! */
    private TestModel testModel = new TestModel();

    public TableModel()
    {
        this(SWTObservables.getRealm(Display.getDefault()));
        TestModel[] list = {
                new TestModel("Mueller", new Date(10000000000L), true, 0, 1000.0, Gender.UNKNOWN, true),
                new TestModel("Meier1", new Date(20000000000L), false, 2, 500.0, Gender.MALE, true),
                new TestModel("Meier2", new Date(100000000000L), false, 2, 123.0, Gender.FEMALE, false),
                new TestModel("Meier3", new Date(40000000000L), false, 2, 11000.0, Gender.UNKNOWN, true),
                new TestModel("Meier4", new Date(30000000000L), false, 2, 2.0, Gender.UNKNOWN, false)};
        this.list.addAll(Arrays.asList(list));
    }
    
    public TestModel getTestModel()
    {
        return testModel;
    }
    
    public void setTestModel(TestModel newModel)
    {
        testModel = newModel;
    }

    /**
     * create writable lists using given realm
     */
    public TableModel(Realm realm)
    {
        Validate.notNull(realm, "Realm must not be null");
        list = new WritableList(realm);
        list.addListChangeListener(listChangeListener);
        selectedList = new WritableList(realm);
        selectedList.addListChangeListener(listChangeListener);
    }

    /**
     * @return Returns the list.
     */
    public WritableList getList()
    {
        return list;
    }

    /**
     * @return Returns the checkedList.
     */
    public WritableList getSelectedList()
    {
        return selectedList;
    }

    @Override
    public String toString()
    {
        StringBuffer result = new StringBuffer();
        result.append("TableModel.list[\n");
        for (Object element : list)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\nselectedList[\n");
        for (Object element : selectedList)
        {
            result.append("  " + element.toString() + "\n");
        }
        result.append("]\n\n");
        return result.toString();
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import com.startup.solynchron.Activator;
import com.startup.solynchron.CodeExecutor;
import com.startup.solynchron.ExecutionManager;
import com.startup.solynchron.InitializationProgressException;
import com.startup.solynchron.dao.LogicManager;
import com.startup.solynchron.dao.RecordLogic;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class OpenProblemFormAction extends OpenFormEditorAction {
    
	/**
	 * The constructor.
	 */
	public OpenProblemFormAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			Object count = ExecutionManager.executeInTransaction(
					new CodeExecutor("open") {
				@Override
				public Object execute(Object[] params) throws Exception {
					return newProblem();
				}
			}, null);
			
			if (count != null) {
				MessageDialog.openInformation(
					getWindow().getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + count + 
					" records in the database");
			}
		} catch (Exception ex) {
			MessageDialog.openError(
	    			getWindow().getShell(),
	    			"Solynchron Plug-in Error",
	    			"Error occurred: " + ex.getMessage());
			Activator.log(ex);
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	private Object newProblem() throws InitializationProgressException {
		RecordLogic logic = (RecordLogic) LogicManager.get(LogicManager.RECORD_LOGIC);
		Long result = logic.incrementRecord();
		if (result != null) {
			openEditor(new FormEditorInput(
					Activator.getResource("OpenProblemFormAction.name")), 
					"com.startup.solynchron.problem-editor"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return result;
	}
	
}
----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/**mbTy
 * 
 */
package com.startup.solynchron.forms;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import com.startup.solynchron.Activator;
import com.startup.solynchron.obj.problem.Problem;
import com.startup.solynchron.obj.problem.ProblemType;

/**
 * This form part is responsible for displaying and editing the most important
 * information of a problem.
 * 
 * @author plamKaTa
 *
 */
public class ProblemFormPart extends RCPFormPart {
	
	private RCPSection mainSection;
	
	private RCPCombo cmbType;
	
	private RCPSimpleText txtDescription;

	/**
	 * Constructor of a form part.
	 */
	public ProblemFormPart() {
	}
	
	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#createUI(org.eclipse.ui.forms.widgets.FormToolkit, org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createUI(FormToolkit toolkit, Composite parent) {
		mainSection = new RCPSection(Activator.getResource("ProblemView.title"));
		
		cmbType = new RCPCombo(Activator.getResource("ProblemView.lblType"), false);

		RCPSimpleLabel lblDescription = new RCPSimpleLabel(
				Activator.getResource("ProblemView.lblDescription"));
		txtDescription = new RCPSimpleText(SWT.MULTI);
		txtDescription.setState(EControlState.MANDATORY, true);
		
		GridBuilder builder = new GridBuilder(toolkit, parent, 2);
		GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);
		
		widgetBuilder.addLine(cmbType);
		
		widgetBuilder.add(lblDescription);
		
		GridData gd = GridLayoutFactory.createDefaultLayoutData();
		gd.widthHint = widgetBuilder.getWidthHint(10);
		gd.horizontalSpan = 3;
		gd.grabExcessHorizontalSpace = true;
		gd.heightHint = widgetBuilder.getHeightHint(4);
		gd.verticalSpan = 3;
		gd.grabExcessVerticalSpace = true;
		widgetBuilder.add(txtDescription, gd);
		widgetBuilder.newLine();
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#bind(net.sf.rcpforms.bindingvalidation.ValidationManager, java.lang.Object)
	 */
	@Override
	public void bind(ValidationManager bm, Object modelBean) {
		Viewer cmbViewer = cmbType.getViewer();
		
		bm.bindValue(cmbType, modelBean, Problem.TYPE);
		bm.bindValue(txtDescription, modelBean, Problem.DESCRIPTION);
		
		MethodValidator txtValidator = new SymmetricMultilineValidator(Problem.DESCRIPTION, 5, 80);
	    bm.addValidator(this, txtValidator); 
	}

	/* (non-Javadoc)
	 * @see net.sf.rcpforms.bindingvalidation.forms.RCPFormPart#setState(net.sf.rcpforms.widgetwrapper.wrapper.EControlState, boolean)
	 */
	@Override
	public void setState(EControlState state, boolean value) {
        mainSection.setState(state, value);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
/*******************************************************************************
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Remo Loetscher - initial API and implementation
 *
 ******************************************************************************
 */

package net.sf.rcpforms.examples.complete;

import net.sf.rcpforms.bindingvalidation.ValidationManager;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormFactory;
import net.sf.rcpforms.bindingvalidation.forms.RCPFormPart;
import net.sf.rcpforms.modeladapter.converter.MethodValidator;
import net.sf.rcpforms.modeladapter.converter.SymmetricMultilineValidator;
import net.sf.rcpforms.widgetwrapper.builder.GridBuilder;
import net.sf.rcpforms.widgetwrapper.builder.GridLayoutFactory;
import net.sf.rcpforms.widgetwrapper.customwidgets.RCPDatePicker;
import net.sf.rcpforms.widgetwrapper.wrapper.EControlState;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPCombo;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSection;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleButton;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleLabel;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPSimpleText;
import net.sf.rcpforms.widgetwrapper.wrapper.RCPText;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * FormPart for GridLayouts in sandbox example. Demonstrates some simple layouts.
 * 
 * @author Remo Loetscher
 */
public class SandboxLayoutFormPart extends RCPFormPart
{
    private RCPSection mainSection;

    private RCPSimpleText m_multiLineText;

    private RCPSimpleLabel m_labelText;

    private RCPDatePicker m_birthDateText;

    private RCPCombo m_geschlechtCombo;

    private RCPSimpleButton m_kontoueberzugCheck;

    private RCPText m_singleLineText;

    /**
     * Constructor for KontodatenViewModel.
     */
    public SandboxLayoutFormPart()
    {
    }

    public void createUI(FormToolkit toolkit, Composite parent)
    {
        // create wrappers
        mainSection = new RCPSection("LayoutSection");
        m_labelText = new RCPSimpleLabel("Multiline:");
        m_multiLineText = new RCPSimpleText(SWT.MULTI);
        m_multiLineText.setState(EControlState.MANDATORY, true);

        m_singleLineText = new RCPText("SingleLine:");

        m_birthDateText = new RCPDatePicker("DatePicker:");
        m_birthDateText.setState(EControlState.RECOMMENDED, true);
        m_geschlechtCombo = new RCPCombo("Combo:", false);
        m_kontoueberzugCheck = new RCPSimpleButton("CheckBox", SWT.CHECK | SWT.RIGHT_TO_LEFT);

        // build layout
        GridBuilder builder = new GridBuilder(toolkit, parent, 2);
        GridBuilder widgetBuilder = builder.addContainer(mainSection, 4);

        widgetBuilder.add(m_labelText);

        // build customised layout
        GridData gd = GridLayoutFactory.createDefaultLayoutData();
//        gd.horizontalAlignment = SWT.FILL;
        gd.widthHint = widgetBuilder.getWidthHint(10);
        gd.horizontalSpan = 3;
        gd.grabExcessHorizontalSpace = true;
//        gd.verticalAlignment = SWT.FILL;
        gd.heightHint = widgetBuilder.getHeightHint(4);
        gd.verticalSpan = 3;
        gd.grabExcessVerticalSpace = true;
        widgetBuilder.add(m_multiLineText, gd);

        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 2nd Line..."));
        widgetBuilder.add(new RCPSimpleLabel("Vertical Span: 3rd Line..."));
        widgetBuilder.newLine();
        // go ahead with "normal" layout.

        // add empty lines
        widgetBuilder.add(new RCPSimpleLabel("Filler and empty line added..."));
        widgetBuilder.fillLine();
        widgetBuilder.newLine();

        widgetBuilder.addLine(m_birthDateText, 8);
        widgetBuilder.addSkipLeftLine(m_singleLineText, 1);
        widgetBuilder.addLine(m_kontoueberzugCheck);
        // create one radio button for each code and associate a radio group manager

        widgetBuilder.addLine(m_geschlechtCombo);

    }

    public void bind(ValidationManager context, Object dataModel)
    {
        context.bindValue(m_multiLineText, dataModel, SimpleBean.P_TEXT);
//        MethodValidator validator = new AsymmetricMultilineValidator(SimpleBean.P_TEXT, new int[]{1,2,3});
        MethodValidator validator = new SymmetricMultilineValidator(SimpleBean.P_TEXT, 3, 35);
        context.addValidator(this, validator); 
    }

    @Override
    public void setState(EControlState state, boolean value)
    {
        mainSection.setState(state, value);

    }

    public static void main(String[] args)
    {

        final Object model = new SimpleBean();
        final RCPFormPart part = new SandboxLayoutFormPart();
        RCPFormFactory.getInstance().startTestShell("SandboxLayoutFormPart", part, model);
    }

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package com.startup.solynchron.dao;

import java.util.HashMap;
import java.util.Map;

/**
 * TODO: migrate logic instantiation to OSGI style instantiation
 * 
 * @author plamKaTa
 *
 */
public class LogicManager<> {
	
	public static final String RECORD_LOGIC = "record";
	
	public static final String PROBLEM_LOGIC = "problem";
	
	private static Map<String, ILogic> logicRegistry = 
		new HashMap<String, ILogic>();
	
	static {
		register(RECORD_LOGIC, new RecordLogic());
		
	}
	
	public static void register(String key, ILogic logic) {
		logicRegistry.put(key, logic);
	}
	
	public static void deregister(String key) {
		logicRegistry.remove(key);
	}
	
	public static T get(String key) {
		return (T) logicRegistry.get(key);
	}

}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:296)
	at org.eclipse.ajdt.ui.AJDTNameEnvironmentProvider.problemFind(AJDTNameEnvironmentProvider.java:79)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$4$8b05d765(ITDAwarenessAspect.aj:223)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:153)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:193)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:515)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1077)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1242)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.ClassCastException: org.eclipse.jdt.internal.core.CompilationUnit cannot be cast to org.eclipse.ajdt.core.javaelements.AJCompilationUnit
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.find(ITDAwareNameEnvironment.java:84)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:287)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.findType(CancelableNameEnvironment.java:45)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:127)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:183)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2592)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2309)
	at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:44)
	at org.eclipse.jdt.internal.compiler.ast.TypeReference.internalResolveType(TypeReference.java:130)
	at org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:197)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1403)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1090)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods(SourceTypeBinding.java:593)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes(CompilationUnitScope.java:447)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:877)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:233)
	... 22 more

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.092
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.093
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.093
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.093
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.093
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.093
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.094
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.094
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.094
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.094
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.094
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.094
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.095
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.096
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.096
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.096
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.096
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.096
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.097
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.097
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.097
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.097
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.097
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.097
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.098
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.098
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.098
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.098
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.098
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.098
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.099
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.099
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.099
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.099
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.099
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.099
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.100
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.100
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.100
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.100
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.100
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.100
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.101
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.101
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.101
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.101
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.101
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.101
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.102
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.102
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.102
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.103
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.103
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.103
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.103
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.104
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.104
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.104
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.104
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.104
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.104
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.105
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.105
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.105
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.105
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.105
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.106
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.106
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.106
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.106
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.106
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.106
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.107
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.107
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.107
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.107
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.107
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.107
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.108
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.108
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.108
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@5fdad6
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.108
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.108
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.108
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.112
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.113
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.113
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.113
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.113
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.113
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.114
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.114
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.114
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.114
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.114
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.114
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.115
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.115
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.115
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.115
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.115
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.115
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.116
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.116
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.116
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.116
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.116
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.116
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.117
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.118
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.118
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.118
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.118
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.118
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.118
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.119
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.119
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.119
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.119
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.119
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.119
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.120
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.120
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.120
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.120
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.120
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.120
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.121
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.121
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.121
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.121
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.121
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.122
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.122
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.122
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.122
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.122
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.122
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.123
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.123
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.123
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.123
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.123
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.123
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.124
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.124
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.124
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.124
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.124
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.124
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.125
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.125
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.125
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.125
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.125
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.125
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.126
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.126
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.127
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.127
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.127
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.127
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.127
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:36.128
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:36.128
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@1106dd5
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.128
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.128
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:36.128
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:56.502
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:56.503
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:56.503
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@17d0d46
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:56.503
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:56.503
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:56.503
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:56.508
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:56.508
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:56.508
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f28b1f
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:56.508
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:56.508
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:56.508
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.922
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.922
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.922
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.922
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.922
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.922
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.923
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.923
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.923
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.923
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.923
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.923
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.924
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.924
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.924
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.924
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.924
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.924
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.925
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.925
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.925
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.926
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.926
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.926
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.926
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.927
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.927
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.927
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.927
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.927
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.928
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.928
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.928
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.928
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.928
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.928
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.929
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.929
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.929
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.929
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.929
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.929
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.930
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.930
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.930
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.930
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.930
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.931
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.931
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.932
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.932
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.932
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.932
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.932
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.933
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.933
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.933
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.933
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.933
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.933
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.934
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.934
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.934
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.934
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.934
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.934
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.935
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.935
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.935
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.935
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.935
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.935
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.936
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.936
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.936
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.936
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.936
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.936
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.937
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.938
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.938
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.938
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.938
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.938
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.938
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.939
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.939
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@f2a357
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.939
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.939
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.939
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.943
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.943
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.943
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.943
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.943
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.943
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.944
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.944
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.944
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.944
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.944
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.944
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.945
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.945
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.945
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.945
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.945
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.945
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.946
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.947
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.947
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.947
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.947
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.947
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.947
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.948
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.948
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.948
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.948
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.948
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.948
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.949
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.949
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.949
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.949
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.949
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.950
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.950
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.950
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.950
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.950
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.950
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.951
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.951
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.951
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.951
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.951
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.951
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.952
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.952
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.952
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.952
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.952
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.952
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.953
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.953
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.953
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.953
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.953
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.953
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.954
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.954
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.954
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.954
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.954
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.954
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.955
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.956
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.956
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.956
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.956
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.956
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.956
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.957
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.957
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.957
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.957
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.957
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.958
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.958
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.958
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.958
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.958
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.958
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.959
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnMemberAccess(CompletionEngine.java:2539)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1646)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:29:57.959
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:29:57.959
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@e38a44
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.959
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.959
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:29:57.959
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:31:51.963
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.addContextInformations(JavaCompletionProposalComputer.java:161)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeContextInformation(JavaCompletionProposalComputer.java:192)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeContextInformation(CompletionProposalComputerDescriptor.java:363)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeContextInformation(CompletionProposalCategory.java:289)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectContextInformation(ContentAssistProcessor.java:338)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeContextInformation(ContentAssistProcessor.java:320)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeContextInformation(ContentAssistant.java:1856)
	at org.eclipse.jface.text.contentassist.ContentAssistSubjectControlAdapter.computeContextInformation(ContentAssistSubjectControlAdapter.java:390)
	at org.eclipse.jface.text.contentassist.ContextInformationPopup.computeContextInformation(ContextInformationPopup.java:390)
	at org.eclipse.jface.text.contentassist.ContextInformationPopup.access$1(ContextInformationPopup.java:389)
	at org.eclipse.jface.text.contentassist.ContextInformationPopup$1.run(ContextInformationPopup.java:187)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.ContextInformationPopup.showContextProposals(ContextInformationPopup.java:182)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showContextInformation(ContentAssistant.java:1710)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:838)
	at org.eclipse.jface.text.source.projection.ProjectionViewer.doOperation(ProjectionViewer.java:1533)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaSourceViewer.doOperation(JavaSourceViewer.java:186)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:199)
	at org.eclipse.jface.text.link.LinkedModeUI.triggerContextInfo(LinkedModeUI.java:818)
	at org.eclipse.jface.text.link.LinkedModeUI.switchPosition(LinkedModeUI.java:867)
	at org.eclipse.jface.text.link.LinkedModeUI.access$15(LinkedModeUI.java:838)
	at org.eclipse.jface.text.link.LinkedModeUI$MySelectionListener.selectionChanged(LinkedModeUI.java:545)
	at org.eclipse.jface.text.TextViewer.firePostSelectionChanged(TextViewer.java:2731)
	at org.eclipse.jface.text.TextViewer.firePostSelectionChanged(TextViewer.java:2679)
	at org.eclipse.jface.text.TextViewer$5.run(TextViewer.java:2658)
	at org.eclipse.swt.widgets.Display.runTimer(Display.java:3943)
	at org.eclipse.swt.widgets.Display.messageProc(Display.java:3135)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:31:51.963
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:31:51.963
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@70295f
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:31:51.963
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:31:51.963
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:31:51.963
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.235
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.235
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:32:52.235
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@52aa57
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.235
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.235
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.235
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.236
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.236
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:32:52.236
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@52aa57
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.236
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.236
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.236
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.237
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.237
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:32:52.237
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@52aa57
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.237
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.238
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.238
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.241
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.242
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:32:52.242
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@576d99
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.242
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.242
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.242
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.242
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.243
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:32:52.243
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@576d99
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.243
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.243
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.243
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.244
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:32:52.244
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:32:52.244
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@576d99
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.244
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.244
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:32:52.244
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.403
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.404
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:03.404
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@73df1e
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.404
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.404
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.404
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.405
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.405
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:03.405
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@73df1e
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.405
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.405
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.405
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.406
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.406
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:03.406
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@73df1e
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.406
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.406
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.406
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.410
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.410
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:03.410
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@cbd5a0
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.410
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.410
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.410
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.411
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.412
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:03.412
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@cbd5a0
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.412
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.412
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.412
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.412
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:03.413
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:03.413
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@cbd5a0
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.413
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.413
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:03.413
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.209
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.221
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:05.221
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@19dfeaa
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.221
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.221
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.221
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.222
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.223
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:05.223
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@19dfeaa
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.223
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.223
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.223
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.224
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.224
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:05.224
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@19dfeaa
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.224
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.224
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.224
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.228
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.229
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:05.229
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@10343e4
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.229
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.229
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.229
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.229
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.230
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:05.230
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@10343e4
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.230
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.230
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.230
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.231
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:343)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:242)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:204)
	at org.eclipse.mylyn.internal.java.ui.editor.FocusedJavaAllProposalComputer.computeCompletionProposals(FocusedJavaAllProposalComputer.java:119)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:470)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:824)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:880)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:569)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:510)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:125)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1191)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1002)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1040)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1036)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1368)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4053)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:346)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3946)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2410)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3471)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:05.231
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:05.231
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@10343e4
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.231
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.231
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:05.231
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:29.580
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:29.580
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:29.580
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@28b8b3
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.580
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.580
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.581
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:29.581
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:29.582
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:29.582
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@28b8b3
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.582
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.582
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.582
!MESSAGE cachedMungers=null

!ENTRY org.eclipse.ajdt.core 4 0 2009-10-08 13:33:29.583
!MESSAGE Bad type signature: ;

!STACK 0
org.aspectj.weaver.BCException: Bad type signature: ;

	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:711)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.signatureToName(UnresolvedType.java:678)
	at org.aspectj.weaver.UnresolvedType.getName(UnresolvedType.java:457)
	at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManager.java:97)
	at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass(BcelWorld.java:391)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:362)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:384)
	at org.aspectj.weaver.World.resolve(World.java:278)
	at org.aspectj.weaver.World.getCoreType(World.java:502)
	at org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:122)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.shouldAccept(ProposalRequestorWrapper.java:86)
	at org.eclipse.ajdt.internal.core.contentassist.ProposalRequestorWrapper.accept(ProposalRequestorWrapper.java:68)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findLocalMethods(CompletionEngine.java:8354)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findInterfacesMethods(CompletionEngine.java:7632)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findMethods(CompletionEngine.java:9601)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.findFieldsAndMethods(CompletionEngine.java:6508)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.completionOnQualifiedNameReference(CompletionEngine.java:2943)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1642)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1862)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doContentAssist(ContentAssistProvider.java:120)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$5$48374bd9(ITDAwarenessAspect.aj:271)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:106)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:355)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:349)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:337)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext(JavaContentAssistInvocationContext.java:279)
	at org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.getCoreContext(JavaContentAssistInvocationContext.java:155)
	at org.eclipse.jdt.internal.ui.text.java.TemplateCompletionProposalComputer.computeCompletionEngine(TemplateCompletionProposalComputer.java:68)
	at org.eclipse.jdt.internal.ui.text.java.AbstractTemplateCompletionProposalComputer.computeCompletionProposals(AbstractTemplateCompletionProposalComputer.java:58)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:316)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:264)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:286)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:246)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1832)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:556)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:553)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:488)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant$2.run(ContentAssistant.java:376)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3855)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3476)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
!SUBENTRY 1 org.eclipse.ajdt.core 4 0 2009-10-08 13:33:29.583
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade.findITDInfoIfExists(AJWorldFacade.java:123)
!SUBENTRY 1 org.eclipse.ajdt.core 1 1 2009-10-08 13:33:29.583
!MESSAGE org.eclipse.ajdt.core.model.AJWorldFacade@28b8b3
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.583
!MESSAGE manager=class org.aspectj.ajdt.internal.core.builder.AjBuildManager@25133222
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.583
!MESSAGE world=class org.aspectj.weaver.bcel.BcelWorld@9220011
!SUBENTRY 2 org.eclipse.ajdt.core 1 0 2009-10-08 13:33:29.583
!MESSAGE cachedMungers=null
