package sample_derby.actions;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.jface.dialogs.MessageDialog;

import sample_derby.Sample_derbyPlugin;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class SampleAction implements IWorkbenchWindowActionDelegate {
	private IWorkbenchWindow window;
	
    /** driver string. */
    private static final String DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
    /** protocol string. */
    private static final String PROTOCOL = "jdbc:derby:";
    /** database name string. */
    private static final String DATABASE = "simpleDB";
    
    /** SQL script for creating Categories table. */
    private static final String CREATE_TABLE = "CREATE TABLE Records" 
        + "("
        + "quantity int"
        + ")";
    
    /** SQL query that counts number of recordss in database    */
    private static final String SELECT_RECORDS_QUERY = "SELECT SUM(quantity) FROM Records";
    
    /** SQL script that adds new record into database    */
    private static final String INSERT_RECORDS_QUERY = "INSERT INTO Records (quantity) VALUES(1)";
	
	/**
	 * The constructor.
	 */
	public SampleAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
	 */
	public void run(IAction action) {
		
		try {
			MessageDialog.openInformation(
	    			window.getShell(),
	    			"Sample_derby Plug-in",
	    			"We have " + queryRecords() + " records in the database");
		} catch (Exception ex) {
			MessageDialog.openError(
	    			window.getShell(),
	    			"Sample_derby Error",
	    			"Error occurred: " + ex.getMessage());
			Sample_derbyPlugin.log(ex);
		}

	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction, org.eclipse.jface.viewers.ISelection)
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}
	
	/**
	 * Connects to database, insert one record into Recordss table 
	 * and then counts tooltal records quantity in database.
	 * If database does not exists then new database will be created.  
	 * @return number of entries in database
	 * @throws SQLException if sql error occurred
	 * @throws IllegalAccessException if JDBC driver instantiation error
	 * @throws ClassNotFoundException if Derby JDBC classes not found
	 * @throws InstantiationException if JDBC driver instantiation error
	 */
	private int queryRecords() throws SQLException, IllegalAccessException, ClassNotFoundException, InstantiationException {
		
		Connection currentConnection = null;
		System.setProperty("derby.system.home",
				Sample_derbyPlugin.getDefault().getStateLocation().toFile().getAbsolutePath());
        Properties props = new Properties();

        try {
            Class.forName(DRIVER).newInstance();
            currentConnection = DriverManager.getConnection(PROTOCOL 
                    + DATABASE, props);
        } catch (SQLException sqlException) {
            //trying to create database
            currentConnection = DriverManager.getConnection(PROTOCOL 
                        + DATABASE + ";create=true", props);
            try {
                Statement s = currentConnection.createStatement();
                try {
                	s.execute(CREATE_TABLE);
                } finally {
                	s.close();
                }
                currentConnection.commit();
            } catch (SQLException ex) {
            	currentConnection.close();
            	throw ex;
            }
        }
        
        int result = 0;
		try {
            Statement s = currentConnection.createStatement();
            try {
	            s.execute(INSERT_RECORDS_QUERY);
	            ResultSet rs = s.executeQuery(SELECT_RECORDS_QUERY);
	            if (rs.next()) {
		            result = rs.getInt(1);
	            }
            } finally {
            	s.close();
            }
            currentConnection.commit();
        } finally {
        	currentConnection.close();
        }
        return result;
	}
}