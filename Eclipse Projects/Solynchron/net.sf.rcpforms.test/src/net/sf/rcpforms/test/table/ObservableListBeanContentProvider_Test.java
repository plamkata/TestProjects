/******************************************************************************* * This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     Marco van Meegen - initial API and implementation * ****************************************************************************** */package net.sf.rcpforms.test.table;import java.util.List;import net.sf.rcpforms.modeladapter.tables.ObservableListBeanContentProvider;import net.sf.rcpforms.test.RCPFormBaseTestCase;import org.eclipse.core.databinding.observable.list.WritableList;/** * test list bean content provider listeners *  * @author Marco van Meegen */public class ObservableListBeanContentProvider_Test extends RCPFormBaseTestCase{    private TableViewerMock mock;    @SuppressWarnings("unchecked")    private List writableList;    private TableModelMock bean1;    private TableModelMock bean2;    private TableModelMock bean3;    @Override    protected void setUp() throws Exception    {        super.setUp();        mock = new TableViewerMock(getShell());        ObservableListBeanContentProvider provider = new ObservableListBeanContentProvider();        mock.setContentProvider(provider);        mock.resetMockData();        writableList = new WritableList();        bean1 = new TableModelMock("Mueller", 33);        bean2 = new TableModelMock("Meier", 44);        bean3 = new TableModelMock("Huber", 55);    }    /**     * (non-Javadoc)     *      * @see junit.framework.TestCase#tearDown()     */    @Override    protected void tearDown() throws Exception    {        super.tearDown();    }    /**     * derived table model to test listener registration     */    private static class TableModelMock extends TableModel    {        public TableModelMock()        {            super();        }        public TableModelMock(String name, int age)        {            super(name, age);        }        int getListenerCount()        {            return propertyChangeSupport.getPropertyChangeListeners().length;        }    }    @SuppressWarnings("unchecked")    public void testAttachSetInput()    {        writableList.add(bean1);        writableList.add(bean2);        writableList.add(bean3);        mock.setInput(writableList);        assertEquals(1, bean1.getListenerCount());        assertEquals(1, bean2.getListenerCount());        assertEquals(1, bean3.getListenerCount());    }    @SuppressWarnings("unchecked")    public void testAdd()    {        writableList.add(bean1);        writableList.add(bean2);        mock.setInput(writableList);        assertEquals(1, bean1.getListenerCount());        assertEquals(1, bean2.getListenerCount());        assertEquals(0, bean3.getListenerCount());        writableList.add(bean3);        assertEquals(1, bean3.getListenerCount());        // add same element again        writableList.add(bean3);        assertEquals(2, bean3.getListenerCount());        // check if tableviewer was updated correctly        assertEquals(2, mock.addedElements.size());        assertTrue(mock.addedElements.contains(bean3));    }    @SuppressWarnings("unchecked")    public void testRemove()    {        writableList.add(bean1);        writableList.add(bean2);        mock.setInput(writableList);        assertEquals(1, bean1.getListenerCount());        assertEquals(1, bean2.getListenerCount());        writableList.remove(bean1);        assertEquals(0, bean1.getListenerCount());        // add same element again        writableList.add(bean2);        assertEquals(2, bean2.getListenerCount());        boolean removed = writableList.remove(bean2);        assertTrue(removed);        assertEquals(1, bean2.getListenerCount());        boolean removed1 = writableList.remove(bean2);        assertTrue(removed1);        assertEquals(0, bean2.getListenerCount());        // check if tableviewer was updated correctly        assertEquals(3, mock.removedElements.size());        assertTrue(mock.removedElements.contains(bean2));        assertTrue(mock.removedElements.contains(bean1));    }    @SuppressWarnings("unchecked")    public void testRemoveAll()    {        writableList.add(bean1);        writableList.add(bean2);        mock.setInput(writableList);        assertEquals(1, bean1.getListenerCount());        assertEquals(1, bean2.getListenerCount());        writableList.clear();        assertEquals(0, bean1.getListenerCount());        assertEquals(0, bean2.getListenerCount());    }    @SuppressWarnings("unchecked")    public void testChangeInput()    {        writableList.add(bean1);        writableList.add(bean2);        mock.setInput(writableList);        assertEquals(1, bean1.getListenerCount());        assertEquals(1, bean2.getListenerCount());        WritableList newInput = new WritableList();        mock.setInput(newInput);        assertEquals(0, bean1.getListenerCount());        assertEquals(0, bean2.getListenerCount());    }}